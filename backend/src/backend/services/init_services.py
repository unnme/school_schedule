from backend.api.depends.repository import classroom_repository
from backend.core.database import session_manager as smngr
from backend.core.logging_config import get_logger
from backend.entities.classroom.schemas import ClassroomCreateRequest
from backend.utils.db_utils import DatabaseManager
from tests.main import F

logger = get_logger(__name__)


class ClassroomService:
    classroom_names = [
        "1",
        "1-Ð°",
        "1-Ð±",
        "2",
        "2-Ð°",
        "2-Ð±",
        "3",
        "3-Ð°",
        "3-Ð±",
        "4",
        "4-Ð°",
        "4-Ð±",
        "5",
        "5-Ð°",
        "5-Ð±",
        "6",
        "6-Ð°",
        "6-Ð±",
        "7",
        "7-Ð°",
        "7-Ð±",
        "8",
        "8-Ð°",
        "8-Ð±",
        "9",
        "9-Ð°",
        "9-Ð±",
        "10",
        "10-Ð°",
        "10-Ð±",
        "11",
        "11-Ð°",
        "11-Ð±",
        "12",
        "12-Ð°",
        "12-Ð±",
        "13",
        "13-Ð°",
        "13-Ð±",
        "14",
        "14-Ð°",
        "14-Ð±",
        "15",
        "15-Ð°",
        "15-Ð±",
        "16",
        "16-Ð°",
        "16-Ð±",
        "17",
        "17-Ð°",
        "17-Ð±",
        "18",
        "18-Ð°",
        "18-Ð±",
        "19",
        "19-Ð°",
        "19-Ð±",
        "20",
        "20-Ð°",
        "20-Ð±",
    ]

    @classmethod
    async def init_classrooms(cls):
        async for session in smngr.get_async_session():
            request_data_list = [
                ClassroomCreateRequest(name=name) for name in cls.classroom_names
            ]

            await classroom_repository.create_many(session, request_data_list)


async def first_run() -> None:
    # await DatabaseManager._drop_all_tables()  # WARN: REMOVE THIS!

    if not await DatabaseManager.check_db_tables():
        logger.info("ðŸŒŸ Starting first run setup...")

        await DatabaseManager.create_db_tables()

        logger.info("âœ… First run setup completed.")

        await ClassroomService.init_classrooms()

        await F.generate_fake_data()
